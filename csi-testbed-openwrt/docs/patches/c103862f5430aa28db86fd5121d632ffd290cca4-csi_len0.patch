From 638ac0237f7b37f7199b1f07ab6ff7cdb2ae47e6 Mon Sep 17 00:00:00 2001
From: Mikhail Zakharov <mzakharo@fastmail.com>
Date: Sat, 9 Nov 2019 22:11:46 -0500
Subject: [PATCH 2/2] changes

---
 ar9003_csi.c | 48 +++++++++++++++++-------------------
 ar9003_csi.h |  7 +++---
 ar9003_mac.c | 69 +++++++++++++++++++++++++++++++++++++++++++++++++---
 hw.c         |  5 ++++
 recv.c       |  6 +++++
 5 files changed, 103 insertions(+), 32 deletions(-)

diff --git a/ar9003_csi.c b/ar9003_csi.c
index a25c1f5..cf84a7d 100644
--- a/ar9003_csi.c
+++ b/ar9003_csi.c
@@ -190,8 +190,8 @@ static ssize_t csi_read(struct file *file, char __user *user_buf,
         }
         memcpy(printbuf+len,payload_buf_addr, payload_len); // copy payload to the buffer
         len += payload_len;
-        memcpy(printbuf+len,&len, 2);                       // record how many bytes we copy 
-        len += 2;
+        //memcpy(printbuf+len,&len, 2);                       // record how many bytes we copy 
+        //len += 2;
         copy_to_user(user_buf,printbuf,len);                // COPY
         
         csi_tail = (csi_tail+1) & 0x0000000F;               // delete the buffer 
@@ -221,19 +221,26 @@ static ssize_t csi_write(struct file *file, const char __user *user_buf,
 
 
 //Record payload of the received packet
-void csi_record_payload(void* data, u_int16_t data_len)
+void csi_record_payload(void* data, u_int16_t data_len, u_int8_t more)
 {
     struct ath9k_csi* csi;
-    if(recording )
+    data_len = min(data_len, (u_int16_t) MAX_PL);
+    if(recording)
     {
         if( ((csi_head + 1) & 0x0000000F) == csi_tail)              // check and update 
             csi_tail = (csi_tail + 1) & 0x0000000F;
         
         csi = (struct ath9k_csi*)&csi_buf[csi_head];
-        memcpy((void*)(csi->payload_buf),data, data_len);           // copy the payload
-        csi->payload_len = data_len;                                // record the payload length (bytes)
 
-        csi_valid = 1;
+        if (more == 3 && csi_valid == 1) {
+            memcpy((void*)(&csi->csi_buf[csi->pkt_status.csi_len]),data, data_len);
+            csi->pkt_status.csi_len += data_len;
+        } else {
+            memcpy((void*)(csi->payload_buf),data, data_len);           // copy the payload
+            csi->payload_len = data_len;                                // record the payload length (bytes)
+            csi->pkt_status.csi_len = 0;
+            csi_valid = 1;
+        }
     }
 }
 EXPORT_SYMBOL(csi_record_payload);
@@ -245,23 +252,11 @@ void csi_record_status(struct ath_hw *ah, struct ath_rx_status *rxs, struct ar90
 
     u_int8_t  nr;
     u_int8_t  chan_BW;
-    u_int8_t  rx_not_sounding;
+    //u_int8_t  rx_not_sounding;
     u_int8_t  rx_hw_upload_data;
     u_int8_t  rx_hw_upload_data_valid;
     u_int8_t  rx_hw_upload_data_type;
     
-    /* some parameters about the hardware upload data*/ 
-    rx_hw_upload_data             = (rxsp->status2 & AR_hw_upload_data) ? 1 : 0;
-    rx_not_sounding               = (rxsp->status4 & AR_rx_not_sounding) ? 1 : 0;
-    rx_hw_upload_data_valid       = (rxsp->status4 & AR_hw_upload_data_valid) ? 1 : 0;
-    rx_hw_upload_data_type        = MS(rxsp->status11, AR_hw_upload_data_type);
-   
-    /* filter out some packets without CSI value (e.g., the beacon)*/
-    if(rxs->rs_phyerr == 0 && rx_hw_upload_data == 0 &&
-                rx_hw_upload_data_valid == 0 && rx_hw_upload_data_type == 0){
-        return;
-    }
-
     if(recording && csi_valid == 1)
     {
         csi = (struct ath9k_csi*)&csi_buf[csi_head];
@@ -286,7 +281,7 @@ void csi_record_status(struct ath_hw *ah, struct ath_rx_status *rxs, struct ar90
         csi->pkt_status.rate      = rxs->rs_rate;       // data rate 
         
         rx_hw_upload_data         = (rxsp->status2 & AR_hw_upload_data) ? 1 : 0;
-        rx_not_sounding           = (rxsp->status4 & AR_rx_not_sounding) ? 1 : 0;
+        //rx_not_sounding           = (rxsp->status4 & AR_rx_not_sounding) ? 1 : 0;
         rx_hw_upload_data_valid   = (rxsp->status4 & AR_hw_upload_data_valid) ? 1 : 0;
         rx_hw_upload_data_type    = MS(rxsp->status11, AR_hw_upload_data_type);
         
@@ -306,16 +301,17 @@ void csi_record_status(struct ath_hw *ah, struct ath_rx_status *rxs, struct ar90
          * NOTE: when the packet is received with error
          * The antenna number value is not correct
          */
-        csi->pkt_status.nc        = (int) (rxs->rs_datalen * BITS_PER_BYTE) /
-                        (int) (BITS_PER_COMPLEX_SYMBOL * csi->pkt_status.nr * csi->pkt_status.num_tones);
-       
+      
         /* copy the csi value to the allocated csi buffer */
         if ( rxs->rs_datalen >0 && rx_hw_upload_data == 1 &&
                 rx_hw_upload_data_valid == 1 && rx_hw_upload_data_type == 1){
-            csi->pkt_status.csi_len = rxs->rs_datalen;
-            memcpy((void*)(csi->csi_buf),data,rxs->rs_datalen);
+            memcpy((void*)(&csi->csi_buf[csi->pkt_status.csi_len]),data, rxs->rs_datalen);
+            csi->pkt_status.csi_len += rxs->rs_datalen;
+            csi->pkt_status.nc  =  (int) (csi->pkt_status.csi_len * BITS_PER_BYTE) /
+                            (int) (BITS_PER_COMPLEX_SYMBOL * csi->pkt_status.nr * csi->pkt_status.num_tones);
         }else {
             csi->pkt_status.csi_len = 0;
+            csi->pkt_status.nc  =  0;
         }
         
         csi_valid = 0;                                  // update 
diff --git a/ar9003_csi.h b/ar9003_csi.h
index d0590eb..d57ca12 100644
--- a/ar9003_csi.h
+++ b/ar9003_csi.h
@@ -73,11 +73,12 @@ struct csi_pkt_status {
     //u_int8_t    hw_upload_data_type;
 } __attribute__((packed));
 
+#define MAX_PL (2800)
 struct ath9k_csi {
 	
     struct csi_pkt_status pkt_status;
-    u_int8_t csi_buf[2800];     //buffer for csi value, 3 antena, each with 114 subcarriers, real and imagine part
-    u_int8_t payload_buf[1500]; //buffer for the payload
+    u_int8_t csi_buf[MAX_PL];     //buffer for csi value, 3 antena, each with 114 subcarriers, real and imagine part
+    u_int8_t payload_buf[MAX_PL]; //buffer for the payload
     u_int16_t payload_len;
 
 };
@@ -86,7 +87,7 @@ struct ath9k_csi {
 
 //static void __exit csi_exit(void);
 
-void   csi_record_payload(void* data, u_int16_t data_len);
+void   csi_record_payload(void* data, u_int16_t data_len, u_int8_t more);
 
 void   csi_record_status(struct ath_hw *hw, struct ath_rx_status *rxs,struct ar9003_rxs *rxsp,void* data); 
 
diff --git a/ar9003_mac.c b/ar9003_mac.c
index e1fe7a7..3700e5f 100644
--- a/ar9003_mac.c
+++ b/ar9003_mac.c
@@ -17,7 +17,7 @@
 #include "hw.h"
 #include "ar9003_mac.h"
 #include "ar9003_mci.h"
-
+#include "ar9003_csi.h"
 static void ar9003_hw_rx_enable(struct ath_hw *hw)
 {
 	REG_WRITE(hw, AR_CR, 0);
@@ -150,11 +150,34 @@ ar9003_set_txdesc(struct ath_hw *ah, void *ds, struct ath_tx_info *i)
 		| set11nRateFlags(i->rates, 3)
 		| SM(i->rtscts_rate, AR_RTSCTSRate));
 
-	WRITE_ONCE(ads->ctl19, AR_Not_Sounding);
-
 	WRITE_ONCE(ads->ctl20, SM(i->txpower[1], AR_XmitPower1));
 	WRITE_ONCE(ads->ctl21, SM(i->txpower[2], AR_XmitPower2));
 	WRITE_ONCE(ads->ctl22, SM(i->txpower[3], AR_XmitPower3));
+
+    if (AR_SREV_9580(ah)) {
+        u_int8_t rate1,rate2,rate3,rate4;
+        rate1 = (ads->ctl14 >> 24) & 0xff;
+        rate2 = (ads->ctl14 >> 16) & 0xff;
+        rate3 = (ads->ctl14 >> 8)  & 0xff;
+        rate4 = (ads->ctl14 >> 0)  & 0xff;
+
+        if ( rate1 >= 0x80 || rate2 >= 0x80 || rate3 >= 0x80){
+            WRITE_ONCE(ads->ctl19, 0);
+            WRITE_ONCE(ads->ctl13, ~(AR_xmit_data_tries1 | AR_xmit_data_tries2 | AR_xmit_data_tries3));
+            {u_int32_t tmp = READ_ONCE(ads->ctl20); WRITE_ONCE(ads->ctl20, tmp & 0x3f000000);}
+            {u_int32_t tmp = READ_ONCE(ads->ctl21); WRITE_ONCE(ads->ctl21, tmp & 0x3f000000);}
+            {u_int32_t tmp = READ_ONCE(ads->ctl22); WRITE_ONCE(ads->ctl22, tmp & 0x3f000000);}
+        }else{
+            WRITE_ONCE(ads->ctl19, AR_Not_Sounding);
+        }
+        if ( rate4 >= 0x80) {
+            WRITE_ONCE(ads->ctl19, 0);
+        }else {
+            WRITE_ONCE(ads->ctl19, AR_Not_Sounding);
+        }
+    } else {
+        WRITE_ONCE(ads->ctl19, AR_Not_Sounding);
+    }
 }
 
 static u16 ar9003_calc_ptr_chksum(struct ar9003_txc *ads)
@@ -483,6 +506,9 @@ int ath9k_hw_process_rxdesc_edma(struct ath_hw *ah, struct ath_rx_status *rxs,
 	struct ar9003_rxs *rxsp = buf_addr;
 	unsigned int phyerr;
 
+    void *data_addr;
+    u_int16_t data_len;
+
 	if ((rxsp->status11 & AR_RxDone) == 0)
 		return -EINPROGRESS;
 
@@ -582,6 +608,43 @@ int ath9k_hw_process_rxdesc_edma(struct ath_hw *ah, struct ath_rx_status *rxs,
 	if (rxsp->status11 & AR_KeyMiss)
 		rxs->rs_status |= ATH9K_RXERR_KEYMISS;
 
+    data_len = rxs->rs_datalen;
+    data_addr = buf_addr + 48;
+
+
+
+    if (AR_SREV_9580(ah)) {
+        u_int8_t  rx_hw_upload_data;
+        u_int8_t  rx_not_sounding;
+#if 0
+        u_int8_t  rx_hw_upload_data_valid;
+        u_int8_t  rx_hw_upload_data_type;
+#endif
+ 
+        /* some parameters about the hardware upload data*/ 
+        rx_hw_upload_data             = (rxsp->status2 & AR_hw_upload_data) ? 1 : 0;
+        rx_not_sounding               = (rxsp->status4 & AR_rx_not_sounding) ? 1 : 0;
+
+#if 0
+        rx_hw_upload_data_valid       = (rxsp->status4 & AR_hw_upload_data_valid) ? 1 : 0;
+        rx_hw_upload_data_type        = MS(rxsp->status11, AR_hw_upload_data_type);
+    printk(KERN_INFO "HT %d MCS %d ant %d bw %d status %d more %d datalen %d upload %d nsound %d valid %d type %d\n", (rxs->rs_rate & 0x80) ? 1 : 0, rxs->rs_rate & 0x7f,
+            rxs->rs_antenna, rxs->bw, rxs->rs_status, rxs->rs_more, rxs->rs_datalen,
+            rx_hw_upload_data, rx_not_sounding, rx_hw_upload_data_valid, rx_hw_upload_data_type);
+#endif
+
+        if (rx_hw_upload_data && rxs->rs_more && !rx_not_sounding) {
+            rxs->rs_more = 3;
+        }
+
+        if (rxs->rs_status == 0) {
+            if  (rxs->rs_more)
+                csi_record_payload(data_addr, data_len, rxs->rs_more);
+
+            if (rxs->rs_rate >= 0x80)
+                csi_record_status(ah,rxs,rxsp,data_addr);
+        }
+    }
 	return 0;
 }
 EXPORT_SYMBOL(ath9k_hw_process_rxdesc_edma);
diff --git a/hw.c b/hw.c
index 3026d80..0ac1c67 100644
--- a/hw.c
+++ b/hw.c
@@ -2103,6 +2103,11 @@ int ath9k_hw_reset(struct ath_hw *ah, struct ath9k_channel *chan,
 	if (AR_SREV_9330(ah) || AR_SREV_9340(ah))
 		ath9k_hw_disable_pll_lock_detect(ah);
 
+    if (AR_SREV_9580(ah))
+    {u32 tmp = REG_READ(ah,0x8344);
+    tmp |= (1 << 28);
+    REG_WRITE(ah, 0x8344,tmp); }
+
 	return 0;
 }
 EXPORT_SYMBOL(ath9k_hw_reset);
diff --git a/recv.c b/recv.c
index 035297f..9d69350 100644
--- a/recv.c
+++ b/recv.c
@@ -1170,6 +1170,12 @@ int ath_rx_tasklet(struct ath_softc *sc, int flush, bool hp)
 			 * used to link buffers together for a sort of
 			 * scatter-gather operation.
 			 */
+
+                        if (rs.rs_more == 3) {
+                            dev_kfree_skb_any(skb);
+		 	    goto requeue;
+                       }
+
 			if (sc->rx.frag) {
 				/* too many fragments - cannot handle frame */
 				dev_kfree_skb_any(sc->rx.frag);
-- 
2.25.1

